import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import plotly.express as px
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score, mean_absolute_error
from scipy.stats import norm

# Configura√ß√£o
st.set_page_config(page_title="Dashboard Agr√≠cola Interativo", layout="wide")
st.title("üåæ Dashboard de Produ√ß√£o Agr√≠cola")

# Dados
@st.cache_data
def carregar_dados():
    df = pd.read_excel("Conjunto_de_Dados_Agricolas.xlsx")
    df["Efici√™ncia (ton/acre)"] = df["Produ√ß√£o(toneladas)"] / df["√Årea_da_Fazenda(acres)"]
    return df

df = carregar_dados()

# Filtros laterais
st.sidebar.header("Filtros")
cultura = st.sidebar.multiselect("Tipo de Cultura", df["Tipo_de_Cultura"].unique())
estacao = st.sidebar.multiselect("Esta√ß√£o", df["Esta√ß√£o"].unique())
solo = st.sidebar.multiselect("Tipo de Solo", df["Tipo_de_Solo"].unique())

# Aplicar filtros
df_filtrado = df.copy()
if cultura:
    df_filtrado = df_filtrado[df_filtrado["Tipo_de_Cultura"].isin(cultura)]
if estacao:
    df_filtrado = df_filtrado[df_filtrado["Esta√ß√£o"].isin(estacao)]
if solo:
    df_filtrado = df_filtrado[df_filtrado["Tipo_de_Solo"].isin(solo)]

# KPIs
col1, col2, col3 = st.columns(3)
col1.metric("üåΩ Produ√ß√£o Total", f"{df_filtrado['Produ√ß√£o(toneladas)'].sum():,.2f} ton")
col2.metric("üíß M√©dia de √Ågua", f"{df_filtrado['Uso_de_√Ågua(metros c√∫bicos)'].mean():,.2f} m¬≥")
col3.metric("üìà Efici√™ncia M√©dia", f"{df_filtrado['Efici√™ncia (ton/acre)'].mean():.2f} ton/acre")

# Gr√°ficos
st.subheader("üìä PRODU√á√ÉO POR CULTURA")
fig1 = px.bar(df_filtrado.groupby("Tipo_de_Cultura")["Produ√ß√£o(toneladas)"].sum().reset_index(),
              x="Tipo_de_Cultura", y="Produ√ß√£o(toneladas)", title="Produ√ß√£o por Cultura", text_auto=True)
st.plotly_chart(fig1, use_container_width=True)

st.subheader("üíß CONSUMO DE √ÅGUA POR IRRIGA√á√ÉO")
fig2 = px.box(df_filtrado, x="Tipo_de_Irriga√ß√£o", y="Uso_de_√Ågua(metros c√∫bicos)",
              title="Distribui√ß√£o de √Ågua por Tipo de Irriga√ß√£o")
st.plotly_chart(fig2, use_container_width=True)

# Estat√≠sticas Avan√ßadas
st.header("üìä An√°lises Estat√≠sticas Avan√ßadas")

st.subheader("CORRELA√á√ÉO ENTRE VARI√ÅVEIS NUM√âRICAS")
variaveis_corr = st.multiselect("Selecione vari√°veis para matriz de correla√ß√£o:",
                                 df_filtrado.select_dtypes(include=np.number).columns.tolist(),
                                 default=df_filtrado.select_dtypes(include=np.number).columns.tolist())
if len(variaveis_corr) >= 2:
    fig_corr, ax_corr = plt.subplots(figsize=(8, 6))
    sns.heatmap(df_filtrado[variaveis_corr].corr(), annot=True, cmap="coolwarm", fmt=".2f", ax=ax_corr)
    ax_corr.set_title("Matriz de Correla√ß√£o")
    st.pyplot(fig_corr)
else:
    st.warning("Selecione pelo menos duas vari√°veis num√©ricas para gerar a matriz de correla√ß√£o.")

st.subheader("DISTRIBUI√á√ÉO DE VARI√ÅVEIS QUANTITATIVAS")
variaveis_quantitativas = df_filtrado.select_dtypes(include=np.number).columns.tolist()
variavel_selecionada = st.selectbox("Selecione a vari√°vel para an√°lise", variaveis_quantitativas)

dados = df_filtrado[variavel_selecionada].dropna()
media = dados.mean()
desvio = dados.std()

fig, ax = plt.subplots(figsize=(8, 4))
sns.histplot(dados, bins=20, stat="density", color="skyblue", alpha=0.5, ax=ax, label="Distribui√ß√£o dos dados")
sns.kdeplot(dados, color="blue", linewidth=2, ax=ax)
x = np.linspace(dados.min(), dados.max(), 100)
curva_normal = norm.pdf(x, media, desvio)
ax.plot(x, curva_normal, 'r-', linewidth=2, label="Curva Normal")
ax.set_title(f"Distribui√ß√£o Normal - {variavel_selecionada}")
ax.set_ylabel("Densidade")
ax.legend()
st.pyplot(fig)

st.subheader("üìä CORRELA√á√ÉO")
variaveis_numericas = df_filtrado.select_dtypes(include=np.number).columns.tolist()
colx, coly = st.columns(2)
with colx:
    var_x = st.selectbox("Vari√°vel X", variaveis_numericas, index=0)
with coly:
    var_y = st.selectbox("Vari√°vel Y", variaveis_numericas, index=1)

fig_corr_filtros = px.scatter(df_filtrado, x=var_x, y=var_y,
                              title=f"Correla√ß√£o: {var_x} x {var_y}",
                              trendline="ols")
st.plotly_chart(fig_corr_filtros, use_container_width=True)

# üîÅ Regress√£o Linear Simples com faixa de confian√ßa
st.subheader("üìè REGRESS√ÉO LINEAR COM FAIXA DE CONFIAN√áA")
variavel_independente_fc = st.selectbox("Escolha a vari√°vel independente (X) para regress√£o com faixa de confian√ßa",
                                        [col for col in variaveis_numericas if col != "Produ√ß√£o(toneladas)"],
                                        key="faixa")

fig_fc, ax_fc = plt.subplots(figsize=(8, 4))
sns.regplot(
    data=df_filtrado,
    x=variavel_independente_fc,
    y="Produ√ß√£o(toneladas)",
    ci=95,
    line_kws={"color": "red", "label": "Linha de Regress√£o"},
    scatter_kws={"alpha": 0.7},
    ax=ax_fc
)
ax_fc.set_title(f"Rela√ß√£o Linear entre {variavel_independente_fc} e Produ√ß√£o(toneladas)")
ax_fc.set_xlabel(variavel_independente_fc)
ax_fc.set_ylabel("Produ√ß√£o(toneladas)")
ax_fc.legend()
st.pyplot(fig_fc)

# Regress√£o Linear M√∫ltipla
st.header("üìâ An√°lise Preditiva da Produ√ß√£o")

X = df_filtrado[["√Årea_da_Fazenda(acres)", "Fertilizante_Usado(toneladas)", "Pesticida_Usado(kg)", "Uso_de_√Ågua(metros c√∫bicos)"]]
y = df_filtrado["Produ√ß√£o(toneladas)"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

modelo = LinearRegression()
modelo.fit(X_train, y_train)
y_pred = modelo.predict(X_test)

st.markdown("### üìã AVALIA√á√ÉO DO MODELO")
st.markdown(f"**R¬≤ (coeficiente de determina√ß√£o):** {r2_score(y_test, y_pred):.2f}")
st.markdown(f"**Erro M√©dio Absoluto (MAE):** {mean_absolute_error(y_test, y_pred):.2f} toneladas")

st.markdown("### üîç IMPORT√ÇNCIA DAS VARI√ÅVEIS (COEFICIENTES)")
coef_df = pd.DataFrame({
    "Vari√°vel": X.columns,
    "Coeficiente": modelo.coef_
})
st.dataframe(coef_df)

st.markdown("### üìé Equa√ß√£o da Regress√£o Linear")
equacao = " + ".join([f"({coef:.2f} √ó {col})" for coef, col in zip(modelo.coef_, X.columns)])
st.latex(f"\\text{{Produ√ß√£o Prevista}} = {modelo.intercept_:.2f} + {equacao}")

st.subheader("COMPARA√á√ÉO: PRODU√á√ÉO REAL VS PREVISTA")
df_resultado = pd.DataFrame({"Real": y_test, "Prevista": y_pred})
fig7 = px.scatter(df_resultado, x="Real", y="Prevista", trendline="ols",
                  title="Produ√ß√£o Real vs Produ√ß√£o Prevista",
                  labels={"Real": "Produ√ß√£o Real", "Prevista": "Produ√ß√£o Prevista"})
fig7.update_traces(marker=dict(color='blue', size=10, line=dict(width=1, color='DarkSlateGrey')))
st.plotly_chart(fig7, use_container_width=True)

st.subheader("üóìÔ∏è PREVIS√ÉO COM NOVOS DADOS (SIMULA√á√ÉO)")
with st.form("form_previsao"):
    st.markdown("Insira os valores estimados para um novo cen√°rio futuro:")
    area = st.number_input("√Årea da Fazenda (acres)", min_value=0.0, step=1.0)
    fertilizante = st.number_input("Fertilizante Usado (toneladas)", min_value=0.0, step=0.1)
    pesticida = st.number_input("Pesticida Usado (kg)", min_value=0.0, step=0.1)
    agua = st.number_input("Uso de √Ågua (m¬≥)", min_value=0.0, step=10.0)
    submit = st.form_submit_button("Prever Produ√ß√£o")

    if submit:
        entrada = np.array([[area, fertilizante, pesticida, agua]])
        previsao = modelo.predict(entrada)[0]
        st.success(f"A produ√ß√£o estimada √©: {previsao:.2f} toneladas")

        # Adiciona ponto de simula√ß√£o ao gr√°fico
        fig7.add_scatter(
            x=[df_resultado["Real"].min() - 5],
            y=[previsao],
            mode='markers',
            marker=dict(symbol='star', size=18, color='red', line=dict(color='black', width=1.5)),
            name="Simula√ß√£o"
        )
        fig7.add_annotation(
            x=df_resultado["Real"].min() - 5,
            y=previsao,
            text=f"{previsao:.2f} ton",
            showarrow=True,
            arrowhead=2,
            ax=60,
            ay=-40,
            font=dict(color="red", size=14),
            bgcolor="white",
            bordercolor="red",
            borderwidth=1
        )
        st.plotly_chart(fig7, use_container_width=True)
